import Head from "next/head";
import { useRouter } from "next/router";
import axios from "axios";
import { useEffect, useState } from "react";
import Link from "next/link";
import Layout from "../components/Layout";
import ThumbUpIcon from "@mui/icons-material/ThumbUp";
import { useAuthContext } from "../helpers/AuthContext";

export default function Home() {
  const [listOfPosts, setListOfPosts] = useState([]);
  const [likedPosts, setLikedPosts] = useState([]);
  const router = useRouter();
  const { authState } = useAuthContext();

  useEffect(() => {
    if (!authState.status) {
      router.push("/login");
    } else {
      axios
        .get("http://localhost:3001/posts", {
          headers: { accessToken: localStorage.getItem("accessToken") },
        })
        .then((response) => {
          setListOfPosts(response.data.listOfPosts);
          setLikedPosts(
            response.data.likedPosts.map((like) => {
              return like.PostId;
            })
          );
        });
    }
  }, []);

  const likeAPost = (PostId) => {
    axios
      .post(
        "http://localhost:3001/likes",
        { PostId },
        { headers: { accessToken: localStorage.getItem("accessToken") } }
      )
      .then((response) => {
        setListOfPosts(
          listOfPosts.map((post) => {
            if (post.id === PostId) {
              if (response.data.liked) {
                return { ...post, Likes: [...post.Likes, 0] };
              } else {
                const likesArray = post.Likes;
                likesArray.pop();
                return { ...post, Likes: likesArray };
              }
            } else {
              return post;
            }
          })
        );
      });

    if (likedPosts.includes(PostId)) {
      setLikedPosts(
        likedPosts.filter((id) => {
          return id != PostId;
        })
      );
    } else {
      setLikedPosts([...likedPosts, PostId]);
    }
  };

  return (
    <>
      <Head>
        <title>Fullstack app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {listOfPosts ? (
          listOfPosts.map((value, key) => {
            return (
              <div className="post" key={value.id}>
                <div className="title">{value.title}</div>
                <Link href="post/[id]" as={`/post/${value.id}`}>
                  <div className="body">{value.postText}</div>
                </Link>
                <div className="footer">
                  <div className="username">
                    <Link href={`/profile/${value.UserId}`}>
                      {value.username}
                    </Link>
                  </div>
                  <div className="buttons">
                    <ThumbUpIcon
                      onClick={() => {
                        likeAPost(value.id);
                      }}
                      className={
                        likedPosts.includes(value.id)
                          ? "unlikeBttn"
                          : "likeBttn"
                      }
                    />
                    <label htmlFor="">{value.Likes.length}</label>
                  </div>
                </div>
              </div>
            );
          })
        ) : (
          <p>表示する投稿はありません。</p>
        )}
      </Layout>
    </>
  );
}
